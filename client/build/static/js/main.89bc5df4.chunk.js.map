{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","data","removeBook","userData","me","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","log","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","App","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89bc5df4.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n           _id'\r\n           username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n        name\r\n        username\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n  mutation saveBook($bookData: BookInput!) {\r\n  saveBook(bookData: $bookData){\r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        SavedBooks{\r\n            bookId\r\n            authors\r\n            image\r\n            link\r\n            description\r\n            title\r\n        }\r\n    }\r\n\r\n}\r\n    `;\r\n \r\nexport const REMOVE_BOOK = gql`\r\n    mutation removeBooks($bookId: ID!) {\r\n    removeBook(bookId: $bookID){\r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        SavedBooks{\r\n            bookId\r\n            authors\r\n            image\r\n            link\r\n            description\r\n            title\r\n    }\r\n  }\r\n  \r\n  }\r\n`;\r\n// using activity 23 Ins_Stripe to implement mutations and queries","import React, { useState, useEffect } from \"react\";\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from \"react-bootstrap\";\r\n\r\nimport Auth from \"../utils/auth\";\r\n// import { searchGoogleBooks } from \"../utils/API\";\r\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { SAVE_BOOK } from \"../utils/mutations\";\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // access mutations\r\n  const [saveBook] = useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchInput}`);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || [\"No author to display\"],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await saveBook({\r\n        variables: {bookData: bookToSave}\r\n      });\r\n\r\n      // if book successfully saves to user\"s account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : \"Search for a book to begin\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant=\"top\" />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? \"This book has already been saved!\"\r\n                        : \"Save this Book!\"}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","import { gql } from '@apollo/client';\r\n// used activity 23 example to run get request through queries\r\nexport const GET_ME = gql`\r\n {\r\n     me {\r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n            bookId\r\n            authors\r\n            description\r\n            title\r\n            image\r\n            link\r\n            \r\n        }\r\n    }\r\n}\r\n`;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from \"react-bootstrap\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\n\r\nimport { GET_ME} from \"../utils/queries\";\r\nimport Auth from \"../utils/auth\";\r\nimport { removeBookId } from \"../utils/localStorage\";\r\nimport {REMOVE_BOOK} from \"../utils/mutations\";\r\n\r\n\r\n\r\nconst SavedBooks = () => {\r\n  const {loading, data} = useQuery(GET_ME);\r\n  const [removeBook] = useMutation(REMOVE_BOOK);\r\n\r\n  // use this to determine if `useEffect()` hook needs to run again\r\n  const userData = data?.me || {};\r\n\r\n  // useEffect(() => {\r\n  //   const getUserData = async () => {\r\n  //     try {\r\n  //       const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n  //       if (!token) {\r\n  //         return false;\r\n  //       }\r\n\r\n  //       const response = await getMe(token);\r\n\r\n  //       if (!response.ok) {\r\n  //         throw new Error(\"something went wrong!\");\r\n  //       }\r\n\r\n  //       const user = await response.json();\r\n  //       setUserData(user);\r\n  //     } catch (err) {\r\n  //       console.error(err);\r\n  //     }\r\n  //   };\r\n\r\n  //   getUserData();\r\n  // }, [userDataLength]);\r\n\r\n  // create function that accepts the book\"s mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n       await removeBook({\r\n        variables: {bookId}\r\n       });\r\n\r\n       removeBookId(bookId);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n  // if data isn\"t here yet, say so\r\n  if (loading) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? \"book\" : \"books\"}:`\r\n            : \"You have no saved books!\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant=\"top\" /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className=\"btn-block btn-danger\" onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  \r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const {data} = await addUser({\r\n        variables: { ...userFormData}\r\n      });\r\n      Auth.login(data.addUser.token);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport {useMutation} from '@apollo/client';\r\nimport {LOGIN_USER} from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n \r\n  const [login] = useMutation(LOGIN_USER);\r\n \r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const {data} = await login({\r\n        variables: {userFormData}\r\n      });\r\n\r\n    Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider,createHttpLink,} from '@apollo/client';\r\nimport { setContext} from '@apollo/client/link/context';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\n\r\n// tutor assited with recognizing file structure as well as paths for pages and components.\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const httpLink = createHttpLink ({\r\n  uri: '/graphql',\r\n});\r\n\r\n  const authLink = setContext((_, { headers}) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers, \r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient ({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\nreturn (\r\n<ApolloProvider client={client}>\r\n<Router>\r\n  <>\r\n    <Navbar />\r\n    <Routes>\r\n      <Route \r\n        path='/' \r\n        element={<SearchBooks />} \r\n      />\r\n      <Route \r\n        path='/saved' \r\n        element={<SavedBooks />} \r\n      />\r\n      <Route \r\n        path='*'\r\n        element={<h1 className='display-2'>Wrong page!</h1>}\r\n      />\r\n    </Routes>\r\n    </>\r\n    </Router>\r\n  </ApolloProvider>\r\n);\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}